@using FsmWorkFlowUI
@using FsmWorkFlowUI.Components
@using FsmWorkFlowUI.Data
@using FsmWorkFlowUI.Pages
@namespace FsmBlazorTests
@attribute [TestClass]
@inherits BunitTestContext
@code
{
    // Will hold the reference to the top level razor
    // component or page we are loading for testing

    IRenderedFragment? cut = null;
    string modelForTest = string.Empty;
    TestWorkFlow? testWorkFlow;
    FsmWorkFlow? wf;

    /// <summary>
    /// Setup function called at the beginning of several
    /// of the tests. Note we cannot use [TestInitialize]
    /// as it is used in the base class to set up the
    /// test context by BUnit itself.
    /// </summary>

    public void Arrange()
    {
        cut = Render(@<TestWorkFlow @ref=testWorkFlow
              FirstStepStatus="@FsmStepStatus.ToDo"
              SecondStepStatus="@FsmStepStatus.InProgress"
              testModel="@modelForTest" /> );
        wf = testWorkFlow?.fsmWorkFlow;
    }

    /// <summary>
    /// RULE: When a component containing an FsmWorkFlow is
    /// instantiated, it contains an instantiated FsmWorkFlow
    /// that is referenced via its @ref field
    /// </summary>

    [TestMethod]
    public void WorkFlowIsCreatedAndReferenced()
    {
        Arrange();
        Assert.IsInstanceOfType(testWorkFlow, typeof(TestWorkFlow));
        Assert.IsInstanceOfType(wf, typeof(FsmWorkFlow));
    }

    /// <summary>
    /// RULE: Test workflow containing an FsmWorkFlow is
    /// initialised to contain states and transitions with
    /// the correct state names, event names, and next states
    /// </summary>

    [TestMethod]
    public void WorkFlowHasCorrectStatesAndTransitions()
    {
        Arrange();
        Assert.AreEqual(4, wf?.States?.Count);
        Assert.AreEqual("FirstStep", wf?.States?[0].Name);
        Assert.AreEqual("SecondStep", wf?.States?[1].Name);
        Assert.AreEqual(4, wf?.States?[0].Transitions?.Count);
        Assert.AreEqual("ToStep2", wf?.States?[0].Transitions?[0].On);
        Assert.AreEqual("StayInStep1", wf?.States?[0].Transitions?[1].On);
        Assert.AreEqual("SecondStep", wf?.States?[0].Transitions?[0].Then);
        Assert.AreEqual("FirstStep", wf?.States?[0].Transitions?[1].Then);
        Assert.AreEqual(4, wf?.States?[1].Transitions?.Count);
        Assert.AreEqual("ToStep1", wf?.States?[1].Transitions?[0].On);
        Assert.AreEqual("StayInStep2", wf?.States?[1].Transitions?[1].On);
        Assert.AreEqual("FirstStep", wf?.States?[1].Transitions?[0].Then);
        Assert.AreEqual("SecondStep", wf?.States?[1].Transitions?[1].Then);
    }

    /// <summary>
    /// RULE: Tabs in the FsmWorkFlow component are enabled if a
    /// navigable transition to them is available from the current
    /// state.
    /// RULE: Enabled tabs have the status assigned to them.
    /// </summary>

    [TestMethod]
    public void InitialStatusesOfTabsAreWellFormed()
    {
        Arrange();
        Assert.AreEqual("FirstStep", wf?.ActiveState?.Name);
        Assert.IsTrue(wf?.States?[0].Enabled, "FirstStep not enabled");
        Assert.AreEqual(FsmStepStatus.ToDo, wf?.States?[0].Status);
        Assert.IsFalse(wf?.States?[1].Enabled, "SecondStep enabled");
        Assert.AreEqual(FsmStepStatus.InProgress, wf?.States?[1].Status);
    }

    /// <summary>
    /// RULE: Guarded transitions from the current state whose
    /// guard functions evaluate to true enable their destination
    /// states
    /// </summary>
    
    [TestMethod]
    public void TrueGuardsEnableTargetTabs()
    {
        cut = Render(@<TestWorkFlow @ref=testWorkFlow
                FirstStepStatus="@FsmStepStatus.ToDo" 
                SecondStepStatus="@FsmStepStatus.InProgress"
                FromStep1Guard="@true"
                testModel="@modelForTest" />
    );
        wf = testWorkFlow?.fsmWorkFlow;

        Func<bool>? when = wf?.States?[0].Transitions?[0].When;
        if (when != null)
            Assert.IsTrue(when(), "Guard not true");
        else
            Assert.Fail("Guard should not be null");
        Assert.IsTrue(wf?.States?[0].Enabled, "FirstStep not enabled");
        Assert.IsTrue(wf?.States?[1].Enabled, "SecondStep not enabled");
    }

    /// <summary>
    /// RULE: When firing events matching valid transitions from
    /// the current state, those transitions are taken.
    /// RULE: When taking transitions, the corresponding action
    /// functions are invoked.
    /// RULE: When firing events matching transitions back to
    /// the same state, the state does not change.
    /// RULE: When firing events matching transitions back to
    /// the same state, the coresponding action functions are
    /// invoked.
    /// RULE: When executing transitions to target states, the
    /// tab content changes to match the content of the target
    /// state.
    /// </summary>
    
    [TestMethod]
    public void TransitionsCanBeTaken()
    {
        cut = Render(@<TestWorkFlow @ref=testWorkFlow
              FirstStepStatus="@FsmStepStatus.ToDo"
              SecondStepStatus="@FsmStepStatus.InProgress"
              FromStep1Guard="@true"
              FromStep2Guard="@true"
              testModel="@modelForTest" />
    );
        wf = testWorkFlow?.fsmWorkFlow;
        MatchTab("p", "In step 1");
        wf?.Fire("StayInStep1");
        Assert.AreEqual(" From Step 1", testWorkFlow?.testModel);
        wf?.Fire("ToStep2");
        Assert.AreEqual(" From Step 1 From Step 1", 
            testWorkFlow?.testModel);
        MatchTab("p", "In step 2");
        wf?.Fire("StayInStep2");
        Assert.AreEqual(" From Step 1 From Step 1 From Step 2", 
            testWorkFlow?.testModel);
        wf?.Fire("ToStep1");
        MatchTab("p", "In step 1");
        Assert.AreEqual(" From Step 1 From Step 1 From Step 2 From Step 2", 
            testWorkFlow?.testModel);
    } 

    /// <summary>
    /// RULE: A valid event name not valid for the current
    /// state is ignored when an event with that name is fired.
    /// RULE: An invalid event name is ignored when an event
    /// with that name is fired.
    /// RULE: Invalid events do not change the current tab
    /// contents.
    /// RULE: Invalid events cause no transition action function
    /// to be executed.
    /// </summary>
    
    [TestMethod]
    public void InvalidEventIsIgnored()
    {
        cut = Render(@<TestWorkFlow @ref=testWorkFlow
              FirstStepStatus="@FsmStepStatus.ToDo"
              SecondStepStatus="@FsmStepStatus.InProgress"
              FromStep1Guard="@true"
              FromStep2Guard="@true"
              testModel="@modelForTest" />
    );
        wf = testWorkFlow?.fsmWorkFlow;
        wf?.Fire("ToStep1");
        Assert.AreEqual("", testWorkFlow?.testModel);
        MatchTab("p", "In step 1");
        wf?.Fire("Gobbledegook");
        Assert.AreEqual("", testWorkFlow?.testModel);
        MatchTab("p", "In step 1");
    }

    /// <summary>
    /// RULE: Exception thrown by When= guard function navigates
    /// to the ErrDialog FsmDialog step.
    /// RULE: Dismissing the FSmDialog registered as the exception
    /// dialog (ErrDialog) returns to the step prior to the
    /// exception-throwing FsmEvent.
    /// </summary>

    [TestMethod]
    public void ExceptionInGuardUsesErrDialog()
    {
        Arrange();
        wf?.Fire("GuardException");
        Assert.AreEqual("", testWorkFlow?.testModel);
        MatchTab("p", "In unexpected error dialog");
        Assert.IsTrue(wf?.ActiveState?.Hidden);
        var buttons = cut?.FindAll("div.modal-footer > button");
        Assert.AreEqual(3, buttons?.Count);
        Assert.AreEqual("Close", buttons?[2].TextContent);
        buttons?[2].Click(); // Click the close button
        MatchTab("p", "In step 1");
    }

    /// <summary>
    /// RULE: Exception thrown by Do= action function navigates
    /// to the ErrDialog FsmDialog step.
    /// RULE: Dismissing the FSmDialog registered as the exception
    /// dialog (ErrDialog) returns to the step prior to the
    /// exception-throwing FsmEvent.
    /// </summary>

    [TestMethod]
    public void ExceptionInActionUsesErrDialog()
    {
        cut = Render(@<TestWorkFlow @ref=testWorkFlow
              FirstStepStatus="@FsmStepStatus.ToDo"
              SecondStepStatus="@FsmStepStatus.InProgress"
              FromStep1Guard="@true"
              FromStep2Guard="@true"
              testModel="@modelForTest" />
    );
        wf = testWorkFlow?.fsmWorkFlow;
        wf?.Fire("ToStep2");
        wf?.Fire("ActionException");
        MatchTab("p", "In unexpected error dialog");
        Assert.IsTrue(wf?.ActiveState?.Hidden);
        var buttons = cut?.FindAll("div.modal-footer > button");
        Assert.AreEqual(3, buttons?.Count);
        Assert.AreEqual("Close", buttons?[2].TextContent);
        buttons?[2].Click(); // Click the close button
        MatchTab("p", "In step 2");
    }

    /// <summary>
    /// RULE: Clicking the OK button in the error dialog
    /// FsmDialog navigates using the event name specified
    /// in the OnOk property.
    /// RULE: Clicking the Other button in the error dialog
    /// FsmDialog navigates using the event name specified
    /// in the OnOther property.
    /// </summary>
    
    [TestMethod]
    public void OkAndOtherButtonsInErorDialogNavigateCorrectly()
    {
        cut = Render(@<TestWorkFlow @ref=testWorkFlow
              FirstStepStatus="@FsmStepStatus.ToDo"
              SecondStepStatus="@FsmStepStatus.InProgress"
              FromStep1Guard="@true"
              FromStep2Guard="@true"
              testModel="@modelForTest" />
    );
        wf = testWorkFlow?.fsmWorkFlow;
        wf?.Fire("GuardException");
        var buttons = cut?.FindAll("div.modal-footer > button");
        Assert.AreEqual("OK", buttons?[0].TextContent);
        buttons?[0].Click(); // Click the OK button
        MatchTab("p", "In step 2");
        wf?.Fire("ActionException");
        buttons = cut?.FindAll("div.modal-footer > button");
        Assert.AreEqual("Other", buttons?[1].TextContent);
        buttons?[1].Click(); // Click the Other button
        MatchTab("p", "In step 1");
    }

    /// <summary>
    /// RULE: Explicit navigation from an
    /// FsmEvent navigates to a dialog step.
    /// RULE: Cancellation within a dialog
    /// step navigates by default back to
    /// the previous step.
    /// </summary>
    
    [TestMethod]
    public void CanDefaultNavigateThroughDialogStep()
    {
        cut = Render(@<TestWorkFlow @ref=testWorkFlow
              FirstStepStatus="@FsmStepStatus.ToDo"
              SecondStepStatus="@FsmStepStatus.InProgress"
              FromStep1Guard="@true"
              FromStep2Guard="@true"
              testModel="@modelForTest" />
    );
        wf = testWorkFlow?.fsmWorkFlow;
        wf?.Fire("ToDialogStep");
        MatchTab("p", "In dialog step");
        var button = cut?.Find("div.modal-header button");
        Assert.IsNotNull(button);
        button.Click();
        MatchTab("p", "In step 1");
    }

    /// <summary>
    /// RULE: The FsmDialog OK button fires the OnOk event
    /// to navigate from the predecessor step via that event.
    /// RULE: The FsmDialog Other button fires the OnOther event
    /// to navigate from the predecessor step via that event.
    /// </summary>
   
    [TestMethod]
    public void CanNavigateThroughDialogStepButtons()
    {
        cut = Render(@<TestWorkFlow @ref=testWorkFlow
              FirstStepStatus="@FsmStepStatus.ToDo"
              SecondStepStatus="@FsmStepStatus.InProgress"
              FromStep1Guard="@true"
              FromStep2Guard="@true"
              testModel="@modelForTest" />
    );
        wf = testWorkFlow?.fsmWorkFlow;
        wf?.Fire("ToDialogStep");
        MatchTab("p", "In dialog step");
        var buttons = cut?.FindAll("div.modal-footer > button");
        Assert.AreEqual("OK", buttons?[0].TextContent);
        buttons?[0].Click(); // Click the OK button
        MatchTab("p", "In step 2");
        wf?.Fire("ToDialogStep");
        MatchTab("p", "In dialog step");
        buttons = cut?.FindAll("div.modal-footer > button");
        Assert.AreEqual("Other", buttons?[1].TextContent);
        buttons?[1].Click(); // Click the OK button
        MatchTab("p", "In step 1");
    }

    /// <summary>
    /// Helper method for validating target tab contents
    /// </summary>
    /// <param name="cssSel">The CSS selector for the element
    ///  in the tab that we are validating</param>
    /// <param name="content">The HTML we are comparing the
    ///  element contents against</param>
    
    private void MatchTab(string cssSel, string content)
    {
        cut?.WaitForState(() => cut?.Find(cssSel)?.TextContent == content);
        string? tabContent = cut?.Find("p")?.TextContent;
        tabContent?.MarkupMatches(content);
    }
}
